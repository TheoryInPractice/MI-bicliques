/**
* @authors Eric Horton, Kyle Kloster, Drew van der Poel
*
* This file is part of MI-bicliques, https://github.com/TheoryInPractice/MI-bicliques,
* and is Copyright (C) North Carolina State University, 2018.
* It is licensed under the three-clause BSD license; see LICENSE.
*/

#include<iostream>
#include<sstream>
#include<vector>
#include"../../src/graph/Graph.h"
#include"../../src/graph/OrderedVertexSet.h"
#include"../../src/algorithms/MaximalCrossingBicliques.h"

/**
 * Test MaximalCrossingBicliques::maximal_crossing_bicliques on a big graph.
 *
 * NOTE: the graph used (test_graph_mcb_huge.txt) has integer labels
 * that are different from the internal integer labels that our
 * graph class uses when it reads in the graph, so we have to convert
 * between internal and external labels.
 *
 */
int test_maximalcrossingbicliques_mcb_huge(int argc, char ** argv) {

    // Whether or not an error has occurred.
    bool error = false;

    // Read in graph
    std::string path_to_file = "./test/test_graph_mcb_huge.txt";
    Graph g(path_to_file, Graph::FILE_FORMAT::adjlist);

    // Hard code independent sets
    std::vector<size_t> temp_vec = {1, 32, 33, 36, 38};
    OrderedVertexSet ind_set(temp_vec);

    // Hard code maximal bicliques crossing from one set to other.
    // Note these labels are external, so we must convert to
    // internal graph labels before comparing.
    std::unordered_map<std::string,size_t> mcb_true {
        {"1,6,16,19,22,27,", 0},
        {"1,6,10,22,27,", 0},
        {"1,4,6,20,", 0},
        {"1,6,20,22,", 0},
        {"1,6,7,16,19,", 0},
        {"0,1,16,24,26,27,", 0},
        {"0,1,16,22,24,27,", 0},
        {"0,1,16,22,25,27,", 0},
        {"0,1,16,19,22,27,", 0},
        {"1,7,8,16,", 0},
        {"1,8,16,22,", 0},
        {"1,8,15,16,", 0},
        {"1,15,16,24,", 0},
        {"1,15,16,19,", 0},
        {"1,7,16,25,", 0},
        {"0,1,18,25,", 0},
        {"0,1,17,19,", 0},
        {"1,10,22,23,28,", 0},
        {"0,1,17,23,26,", 0},
        {"0,1,17,21,23,28,", 0},
        {"1,8,20,22,23,", 0},
        {"1,8,15,20,23,", 0},
        {"0,1,20,21,22,23,28,", 0},
        {"1,4,20,21,23,28,", 0},
        {"1,15,20,21,23,", 0},
        {"0,1,17,24,26,", 0},
        {"0,1,20,22,24,", 0},
        {"0,1,17,25,28,", 0},
        {"0,1,22,25,27,28,", 0},
        {"0,1,21,22,27,28,", 0},
        {"1,7,16,33,", 0},
        {"1,16,24,26,27,33,", 0},
        {"1,7,16,33,", 0},
        {"1,4,6,27,36,", 0},
        {"1,6,19,27,36,", 0},
        {"1,6,10,27,36,", 0},
        {"1,6,10,13,18,36,", 0},
        {"1,6,13,19,36,", 0},
        {"1,6,7,19,36,", 0},
        {"1,6,7,10,18,36,", 0},
        {"1,4,6,7,36,", 0},
        {"1,13,15,18,36,", 0},
        {"1,15,17,19,36,", 0},
        {"1,13,15,19,36,", 0},
        {"1,7,8,23,36,", 0},
        {"1,4,7,23,36,", 0},
        {"1,10,23,28,36,", 0},
        {"1,8,13,15,23,36,", 0},
        {"1,8,15,17,23,36,", 0},
        {"1,3,17,21,23,28,36,", 0},
        {"1,4,17,21,23,28,36,", 0},
        {"1,15,17,21,23,36,", 0},
        {"1,15,17,24,36,", 0},
        {"1,4,17,25,28,36,", 0},
        {"1,19,22,27,38,", 0},
        {"1,20,21,22,28,38,", 0},
        {"1,4,20,21,28,38,", 0},
        {"1,15,20,21,38,", 0},
        {"1,20,22,24,38,", 0},
        {"1,10,22,24,27,38,", 0},
        {"1,15,20,24,38,", 0},
        {"1,10,22,25,27,28,38,", 0},
        {"1,21,22,27,28,38,", 0},
        {"1,8,17,23,32,36,", 0},
        {"1,3,17,23,28,32,36,", 0},
        {"1,4,17,23,28,32,36,", 0},
        {"1,24,26,27,33,36,", 0},
        {"1,7,10,23,33,36,", 0},
        {"1,3,7,23,33,36,", 0},
        {"1,10,13,23,33,36,", 0},
        {"1,13,23,26,33,36,", 0},
        {"1,17,23,26,33,36,", 0},
        {"1,3,17,21,23,33,36,", 0},
        {"1,17,24,26,33,36,", 0},
        {"1,19,27,36,38,", 0},
        {"1,7,19,36,38,", 0},
        {"1,7,10,18,25,36,38,", 0},
        {"1,15,18,36,38,", 0},
        {"1,15,19,36,38,", 0},
        {"1,15,21,36,38,", 0},
        {"1,15,24,36,38,", 0},
        {"1,4,25,27,28,36,38,", 0},
        {"1,10,25,27,28,36,38,", 0},
        {"1,4,7,25,36,38,", 0},
        {"1,4,21,27,28,36,38,", 0},
        {"1,3,17,23,32,33,36,", 0},
        {"1,4,28,32,36,38,", 0},
        {"1,7,10,33,36,38,", 0},
        {"1,10,24,27,33,36,38,", 0},
        {"1,21,27,33,36,38,", 0},
        {"2,5,8,11,32,", 0},
        {"2,5,8,32,37,", 0},
        {"2,4,5,11,32,", 0},
        {"2,4,32,39,", 0},
        {"3,17,23,28,30,32,", 0},
        {"5,8,17,23,32,37,", 0},
        {"5,8,17,23,29,32,", 0},
        {"5,8,17,23,30,32,", 0},
        {"3,5,17,23,30,32,", 0},
        {"4,5,17,23,32,", 0},
        {"4,17,23,32,39,", 0},
        {"3,11,23,28,30,32,", 0},
        {"5,8,11,23,29,32,", 0},
        {"5,8,11,23,30,32,", 0},
        {"3,5,11,23,30,32,", 0},
        {"4,5,11,23,32,", 0},
        {"2,32,33,39,", 0},
        {"3,17,23,30,32,33,", 0},
        {"3,17,23,32,33,39,", 0},
        {"17,23,28,32,36,37,", 0},
        {"8,17,23,32,36,37,", 0},
        {"3,11,23,28,32,36,", 0},
        {"4,11,23,28,32,36,", 0},
        {"8,11,23,32,36,", 0},
        {"4,5,11,32,38,", 0},
        {"4,32,38,39,", 0},
        {"5,11,29,32,38,", 0},
        {"4,5,11,32,38,", 0},
        {"32,33,38,39,", 0},
        {"4,11,28,32,36,38,", 0},
        {"16,26,27,30,33,", 0},
        {"12,17,26,33,", 0},
        {"17,23,26,30,33,", 0},
        {"12,26,27,33,", 0},
        {"12,13,26,33,", 0},
        {"2,16,27,33,", 0},
        {"2,12,27,33,39,", 0},
        {"10,12,27,33,39,", 0},
        {"7,10,23,33,39,", 0},
        {"3,7,23,33,39,", 0},
        {"2,7,14,16,33,", 0},
        {"2,7,12,14,33,", 0},
        {"3,14,17,30,33,", 0},
        {"10,12,13,14,33,", 0},
        {"7,10,12,14,33,", 0},
        {"12,14,17,33,", 0},
        {"14,16,24,31,33,", 0},
        {"14,16,30,33,", 0},
        {"17,24,33,39,", 0},
        {"12,17,33,39,", 0},
        {"3,31,33,39,", 0},
        {"7,10,12,33,39,", 0},
        {"2,7,12,33,39,", 0},
        {"3,14,17,21,33,36,", 0},
        {"3,7,14,33,36,", 0},
        {"3,14,21,31,33,36,", 0},
        {"10,13,14,33,36,", 0},
        {"14,17,24,33,36,", 0},
        {"10,24,27,33,38,39,", 0},
        {"7,10,33,38,39,", 0},
        {"10,24,31,33,38,39,", 0},
        {"7,10,33,38,39,", 0},
        {"14,21,31,33,36,38,", 0},
        {"10,14,24,31,33,36,38,", 0},
        {"7,10,14,33,36,38,", 0},
        {"4,6,11,31,36,", 0},
        {"4,6,7,11,36,", 0},
        {"4,7,11,23,36,", 0},
        {"7,19,34,36,37,", 0},
        {"6,7,19,36,37,", 0},
        {"7,8,11,23,36,", 0},
        {"7,8,23,36,37,", 0},
        {"3,7,11,23,36,", 0},
        {"7,8,11,14,36,", 0},
        {"3,7,11,14,36,", 0},
        {"7,8,14,36,37,", 0},
        {"9,10,13,34,36,", 0},
        {"9,19,34,36,37,", 0},
        {"9,28,34,36,37,", 0},
        {"9,13,19,34,36,", 0},
        {"3,9,21,28,36,", 0},
        {"8,9,13,15,36,", 0},
        {"9,10,13,35,36,", 0},
        {"9,13,15,19,35,36,", 0},
        {"6,9,10,13,36,", 0},
        {"6,9,13,19,36,", 0},
        {"6,9,10,31,36,", 0},
        {"3,9,21,31,36,", 0},
        {"6,9,19,31,36,37,", 0},
        {"8,9,15,31,36,37,", 0},
        {"9,15,19,31,36,37,", 0},
        {"11,24,26,35,36,", 0},
        {"11,13,26,35,36,", 0},
        {"11,13,23,26,36,", 0},
        {"8,11,13,23,36,", 0},
        {"6,11,13,36,", 0},
        {"8,11,13,14,36,", 0},
        {"11,13,14,35,36,", 0},
        {"8,11,14,31,36,", 0},
        {"3,11,14,31,36,", 0},
        {"14,17,25,36,", 0},
        {"10,13,14,18,35,36,", 0},
        {"8,14,15,17,36,37,", 0},
        {"14,15,17,24,36,", 0},
        {"14,15,17,21,36,", 0},
        {"8,13,14,15,36,", 0},
        {"13,14,15,18,35,36,", 0},
        {"8,14,15,31,36,37,", 0},
        {"15,17,19,36,37,", 0},
        {"8,15,17,23,36,37,", 0},
        {"6,10,18,31,36,", 0},
        {"6,19,27,36,37,", 0},
        {"27,28,36,37,", 0},
        {"4,25,28,34,36,38,", 0},
        {"4,7,25,34,36,38,", 0},
        {"4,11,31,35,36,38,", 0},
        {"4,11,25,28,36,38,", 0},
        {"4,7,11,25,36,38,", 0},
        {"4,21,31,36,38,", 0},
        {"7,10,25,34,36,38,", 0},
        {"7,19,34,36,38,", 0},
        {"7,10,14,18,25,36,38,", 0},
        {"7,11,14,25,36,38,", 0},
        {"9,10,25,28,34,36,38,", 0},
        {"9,19,34,36,38,", 0},
        {"9,21,28,36,38,", 0},
        {"9,10,24,31,35,36,38,", 0},
        {"9,15,21,31,36,38,", 0},
        {"9,15,24,31,35,36,38,", 0},
        {"9,15,19,31,35,36,38,", 0},
        {"11,14,24,31,35,36,38,", 0},
        {"10,14,24,31,35,36,38,", 0},
        {"10,14,18,31,35,36,38,", 0},
        {"14,15,21,31,36,38,", 0},
        {"14,15,24,31,35,36,38,", 0},
        {"14,15,18,31,35,36,38,", 0},
        {"4,25,27,38,39,", 0},
        {"4,20,28,34,38,", 0},
        {"4,5,7,34,38,", 0},
        {"4,11,20,31,35,38,", 0},
        {"4,5,11,35,38,", 0},
        {"4,11,20,28,38,", 0},
        {"4,5,7,11,38,", 0},
        {"4,20,21,31,38,", 0},
        {"4,7,25,38,39,", 0},
        {"4,20,31,35,38,39,", 0},
        {"5,10,35,38,", 0},
        {"10,24,31,35,38,39,", 0},
        {"5,10,22,34,38,", 0},
        {"5,7,10,34,38,", 0},
        {"5,10,22,29,38,", 0},
        {"5,7,10,29,38,", 0},
        {"9,10,24,29,31,38,", 0},
        {"10,22,24,29,31,38,", 0},
        {"10,25,27,38,39,", 0},
        {"10,22,25,28,34,38,", 0},
        {"7,10,25,38,39,", 0},
        {"11,20,24,31,35,38,", 0},
        {"11,20,22,24,29,31,38,", 0},
        {"5,11,22,29,38,", 0},
        {"5,7,11,29,38,", 0},
        {"11,22,25,28,38,", 0},
        {"11,20,22,28,38,", 0},
        {"5,15,19,35,38,", 0},
        {"9,15,20,24,31,35,38,", 0},
        {"9,15,20,21,31,38,", 0},
        {"9,19,29,31,38,", 0},
        {"5,19,22,34,38,", 0},
        {"5,7,19,34,38,", 0},
        {"5,19,22,29,38,", 0},
        {"5,7,19,29,38,", 0},
        {"19,22,29,31,38,", 0},
        {"9,20,28,34,38,", 0},
        {"9,20,21,28,38,", 0},
        {"9,20,24,29,31,38,", 0},
        {"9,20,21,29,31,38,", 0},
        {"20,22,28,34,38,", 0},
        {"20,21,22,29,31,38,", 0},
        {"20,24,31,35,38,39,", 0}
    };

    // Compute MCBs
    auto mcbs_computed = maximal_crossing_bicliques(g, ind_set);

    // Check every mcb found is actually in the true set
    for (auto this_mcb : mcbs_computed) {

        auto this_mcb_string = this_mcb.to_string();

        if (mcb_true.find(this_mcb_string) == mcb_true.end()){
            std::cout << "maximal_crossing_bicliques found non true mib " << this_mcb_string << std::endl;

            auto temp_left = OrderedVertexSet(this_mcb.get_left());
            auto temp_right = OrderedVertexSet(this_mcb.get_right());
            std::vector<OrderedVertexSet> both_sides = {
                temp_left, temp_right
            };

            std::cout << "\tLeft: " << temp_left.to_string() << std::endl;
            std::cout << "\tRight: " << temp_right.to_string() << std::endl;

            for ( size_t idx: {0,1} ) {
                auto temp_set1 = both_sides[idx];
                auto temp_set2 = both_sides[1-idx];
                for (auto u: temp_set1) {
                    if (!g.is_completely_connect_to(u, temp_set2)){
                        std::cout << "\tNOT biclique not completely connected, node " << u << std::endl;
                    }
                    OrderedVertexSet just_u((std::vector<size_t>) {u});
                    if (!g.is_completely_independent_from(u, temp_set1.set_minus(just_u))){
                        std::cout << "\tNOT biclique not completely independent, node " << u << std::endl;
                    }
                }
            }

            // now check for maximality
            for (size_t idx = 0; idx < g.get_num_vertices(); idx++) {
                // skip vertices contained in the biclique already
                if (temp_left.has_vertex(idx) || temp_right.has_vertex(idx)) {
                    continue;
                }

                for ( size_t set_idx: {0,1} ) {
                    auto temp_set1 = both_sides[set_idx];
                    auto temp_set2 = both_sides[1-set_idx];
                    if (g.is_completely_connect_to(idx, temp_set1)){
                        if (g.is_completely_independent_from(idx, temp_set2)) {
                            std::cout << "\tNOT maximal: vertex " << idx << std::endl;
                            std::cout << "\t\tcan be added to " << temp_set2.to_string() << std::endl;
                        }
                    }
                }

            }

            error=true;
        }
        else {
            mcb_true[this_mcb_string] ++;
        }
    }

    // Check we found correct number of MCB
    if (mcb_true.size() != mcbs_computed.size()) {
        std::cout << "maximal_crossing_bicliques found wrong number of mcbs: " << mcbs_computed.size() << " instead of correct number " << mcb_true.size() << std::endl;
        error=true;
    }

    // Check how many times each MCB was found (should be 1 each)
    for (auto const & iter : mcb_true) {
        std::string this_mcb = iter.first;
        size_t this_count = iter.second;

        if (this_count != 1) {
            std::cout << "maximal_crossing_bicliques found a mcb " << this_count << " times: " << this_mcb << std::endl;
            error=true;
        }

    }

    return error;

}
